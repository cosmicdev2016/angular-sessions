Creating a Attribute Directive:
    ☐ Create a new folder in app - first-basic
    ☐ Create a TS file inside it - first-basic.directive.ts
    ☐ Create a class and decorate with @Directive (needs to be imported from angular/core)
        import { Directive, ElementRef, OnInit } from '@angular/core';

        @Directive({
            selector: '[appFirstBasic]'
        })
        export class FirstBasic implements OnInit {
            constructor(private elementRef: ElementRef) {
            }

            ngOnInit() {
                this.elementRef.nativeElement.style.backgroundColor = 'green';
            }
        }
    ☐ We can inject the element the directive sits on into this class and angular gives us that ability.
    You add the element that you need angular to inject for us, as the constructor argument
    ☐ Just like the component, directive also has OnInit and this is the ONLY lifecycle hook direvives can use.
    It has OnDestroy though.
    ☐ Directives don't have a view / template and we can't add.
    ☐ app.module.ts changes - Add this directive class to imports and declarations section of NgModule
    ☐ 'selector' in square brackets means its a attribute style directive and it would be used as below:
    <p appFirstBasic>Style me with first directive!</p>
    ☐ You can also create a directive with CLI -> ng g d <directive-name>
    
Better way of styling the element using Renderer:
    ☐ You should use the Renderer for any DOM manipulations.
    ☐ constructor(private elRef: ElementRef, private renderer: Renderer2) { }
    ☐ ngOnInit() {
        this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
      }
    ☐ You need to import Renderer2 from angular/core

HostListener to listen to Host Events:
    ☐ HostListener is used to listen on events the directive sits on.
    ☐ 'mouseenter' and 'mouseleave'
    ☐ Usage:
    @HostListener('mouseenter') 
    onMouseEnter(eventData: Event) {
        this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
    }
    @HostListener('mouseleave') 
    onMouseEnter(eventData: Event) {
        this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'transparent');
    }