Template approach:
    ☐ Refer: Day-7_Forms_Tempate_vs_Reactive.PNG
    ☐ 'FormsModule' includes lot of forms related functionality. Make sure app.module file has that entry in your imports. 
        import { FormsModule } from '@angular/forms'
    ☐ You need this for template driven approach to work.

TD: Creating the Form and Registering Controls: 
    ☐ To make your control available to angular, you need to do 2 things:
        ☐ add 'ngModel' to the control (not as 2 way binding syntax)
        ☐ add 'name' attribute to the form control

TD: Submitting and Using the Form:
    ☐ We don't add click event on Submit button because that would trigger the default Javascript submit event.
    ☐ We override it by using another directive provided by FormsModule '(ngSubmit)' on <form> element.
        <form (ngSubmit)="onSubmit()">
        In TS file: onSubmit() { }
    ☐ Get the reference to the form:
        <form (ngSubmit)="onSubmit(f)" #f>
        In TS file: onSubmit(form: HTMLFormElement) { }
        This will give you the DOM representation of the form.
    ☐ Get the value object representaion of the form:
        <form (ngSubmit)="onSubmit(f)" #f="ngForm">
        In TS file: onSubmit(form: NgForm) { } (Need to import 'NgForm' from @angular/forms)
        'form.value' represents the form's json object bound to this form.

TD: Accessing the Form with @ViewChild:
    ☐ Change the form element HTML
        <form (ngSubmit)="onSubmit()" #f>
    ☐ Import 'ViewChild' from @angular/core
    ☐ Add a variable to TS file and decorate with @ViewChild
        @ViewChild('f') signupForm;
        You need to pass the local reference to the decorator
    ☐ Change onSubmit() method:
        onSubmit() { console.log(this.signupForm); }

TD: Adding Validation to check User Input:
    ☐ required, email are some of the validators, you can add to your form controls.

TD: Using the Form State:
    ☐ Disable submit button if form is not valid. Use property binding on submit button to disable it:
        [disabled]="!f.valid"
    ☐ Taking advantage of the CSS classes angular adds to controls:
        input.ng-invalid.ng-touched { border: 1px solid red; }

TD: Output Validation Error Message:
    ☐ Change the HTML form control
        <input ... #email="ngModel">
        <span class="help-block" *ngIf="!email.valid && email.touched">Please enter a valid email!</span>


TD: Set default values:
    ☐ Using property binding with ngModel
        In HTML file: [ngModel]="<name of property>"
        In TS file: property:string = "some value";


Reactive approach:
    ☐ 
