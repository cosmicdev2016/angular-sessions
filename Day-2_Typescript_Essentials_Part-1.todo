What is Node.js?:
    ☐ Node.js is an Open-source framework
    ☐ Node.js provides a JavaScript runtime built on Chrome's V8 JavaScript engine (Same used in Chrome browser)
    ☐ Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.
    ☐ ...

What is NPM?:
    ☐ NPM is the package manager used by Node.js applications.
    ☐ It is like Maven for Java or Composer for PHP.
    ☐ The Command Line Interface (CLI) : you can run it with 'npm' command.

Managing multiple JS files:
    ☐ Create package.json -> npm init

Setup:
    ☐ Download VS Code -> https://code.visualstudio.com/download
    ☐ Download Node.js -> https://nodejs.org/en/download/
    ☐ node -v
    ☐ npm -v
    ☐ Install Typescript using npm -> npm install -g typescript
    ☐ tsc -v
    
Run Typescript code:
    ☐ Compile ts file -> tsc YOUR_FILE.ts
    ☐ Use npm to run js file -> node YOUR_FILE.js
    ☐ Create a Typescript project -> tsc --init (creates a tsconfig.json)

Automatically compile and restart your node application:
    ☐ Modify tsconfig.json -> add this <<"watch": true>> in compilerOptions. Run 'tsc' command.
    ☐ Install Nodemon -> npm install -g nodemon
        ☐ Monitor for any changes in your node.js application and automatically restart the server - perfect 
        for development.
    ☐ nodemon YOUR_FILE.js

Typescript Essentials Part-1:
    ☐ Assignment in ES6 -> let, const keywords
        ☐ const with primitive 
        ☐ const with Arrays
            const emails = ['sam@email.com', 'bob@email.com', 'john@email.com'];
            //const emails = [];
            emails.push('alice@email.com');
    ☐ Block scoping -> var vs. let, const
        let limit = 100;
        {
            let limit = 10;
            console.log('inner limit', limit);
        }
        console.log('outer limit', limit);
        ☐ What happens if let is replaced with var or const?
        ☐ Local variables in functions don't intervene with each other.
    ☐ Template literals -> let a = `Hello, ${insert}`; -> Get rid of concatenation.
    ☐ Operating and Destructuring assignment
        ☐ Spread operator -> { ... } -> let b = {10, ...a, 70};
        ☐ Rest parameters -> function(...) {}
            function collect(...a) {
                console.log(a);
            }
            collect(1, 2, 3, 4, 5);
        ☐ Destructuring assignment on Arrays and Objects
            // Arrays
            let z = [4, 5, 6];
            let [four, five] = z;
            console.log(four, five);
            // Objects
            let king = { name: 'Mufasa', kids: 1};
            let {name, kids} = king;
            console.log(name, kids);
        ☐ Exception-1
            let king = { name: 'Mufasa', kids: 1};
            let name, kids;
            //{name, kids} = king;
            ({name, kids} = king);
            console.log(name, kids);

Overview:
    ☐ Let replaces var in es6 in term of variable assignment. Let also allows for block scoping, in contrast 
    to var.
    ☐ Const declares variables that cannot be re-assigned. Constants also allow for block scoping along with 
    ‘let.’
    ☐ Template literals, created by a pair of back-ticks, allow for embedded-expressions using the dollar-sign 
    and a pair of curly braces: `${...}`
    ☐ Local scope refers to the set of statements, variables, objects, and more that confine to a coding block 
    denoted by a pair of curly braces: { ... }
    ☐ Global scope refers to the set of statements, variables, objects, methods, and more that exist outside 
    and beyond all local scope functions and coding blocks.
    ☐ The spread operator spreads individual values to allow for expansion with multiple arguments and elements. 
    Denoted by three periods: ...
    ☐ Rest parameters allow for the gathering of multiple parameter calls into one array: Denoted by three 
    periods: …
    ☐ Destructuring assignment on arrays allows for much more efficient array manipulation and assigns multiple 
    variables from array data based on the index value.
    ☐ Destructuring assignment on objects allows for more concise object manipulation and assigns multiple 
    variables from object data based on keynames.
        
References:
    ☐ Official documentation: https://www.typescriptlang.org/docs/handbook/basic-types.html
    ☐ sourceMap property -> https://stackoverflow.com/questions/17493738/what-is-a-typescript-map-file
    ☐ https://stackoverflow.com/questions/41993811/understanding-target-and-module-in-tsconfig
